/*! clipboard.js v2.0.11 - Simplified standalone version */
(function(window, document) {
    'use strict';

    // Helper function to select text
    function select(element) {
        var selectedText;

        if (element.nodeName === 'SELECT') {
            element.focus();
            selectedText = element.value;
        } else if (element.nodeName === 'INPUT' || element.nodeName === 'TEXTAREA') {
            var isReadOnly = element.hasAttribute('readonly');

            if (!isReadOnly) {
                element.setAttribute('readonly', '');
            }

            element.select();
            element.setSelectionRange(0, element.value.length);

            if (!isReadOnly) {
                element.removeAttribute('readonly');
            }

            selectedText = element.value;
        } else {
            if (element.hasAttribute('contenteditable')) {
                element.focus();
            }

            var selection = window.getSelection();
            var range = document.createRange();

            range.selectNodeContents(element);
            selection.removeAllRanges();
            selection.addRange(range);

            selectedText = selection.toString();
        }

        return selectedText;
    }

    // Main Clipboard class
    function Clipboard(selector, options) {
        this.selector = selector;
        this.options = options || {};
        this.init();
    }

    Clipboard.prototype.init = function() {
        var triggers = document.querySelectorAll(this.selector);
        var self = this;

        Array.prototype.forEach.call(triggers, function(trigger) {
            trigger.addEventListener('click', function(e) {
                self.handleClick(e);
            });
        });
    };

    Clipboard.prototype.handleClick = function(e) {
        var trigger = e.delegateTarget || e.currentTarget;
        var action = this.getAction(trigger);
        var text = this.getText(trigger);
        var target = this.getTarget(trigger);

        if (text) {
            this.copyText(text, trigger);
        } else if (target) {
            var targetElement = document.querySelector(target);
            if (targetElement) {
                this.copyTarget(targetElement, trigger);
            }
        }
    };

    Clipboard.prototype.getAction = function(trigger) {
        return trigger.getAttribute('data-clipboard-action') || 'copy';
    };

    Clipboard.prototype.getText = function(trigger) {
        return trigger.getAttribute('data-clipboard-text');
    };

    Clipboard.prototype.getTarget = function(trigger) {
        return trigger.getAttribute('data-clipboard-target');
    };

    Clipboard.prototype.copyText = function(text, trigger) {
        var fakeElement = document.createElement('textarea');
        fakeElement.value = text;
        fakeElement.style.position = 'absolute';
        fakeElement.style.left = '-9999px';
        
        document.body.appendChild(fakeElement);
        select(fakeElement);
        
        try {
            var succeeded = document.execCommand('copy');
            this.handleResult(succeeded, trigger, text);
        } catch (err) {
            this.handleResult(false, trigger, text);
        }
        
        document.body.removeChild(fakeElement);
    };

    Clipboard.prototype.copyTarget = function(target, trigger) {
        var selectedText = select(target);
        
        try {
            var succeeded = document.execCommand('copy');
            this.handleResult(succeeded, trigger, selectedText);
        } catch (err) {
            this.handleResult(false, trigger, selectedText);
        }
    };

    Clipboard.prototype.handleResult = function(succeeded, trigger, text) {
        if (this.options.success && succeeded) {
            this.options.success({
                action: 'copy',
                text: text,
                trigger: trigger
            });
        } else if (this.options.error && !succeeded) {
            this.options.error({
                action: 'copy',
                trigger: trigger
            });
        }
    };

    // Static method to check if clipboard is supported
    Clipboard.isSupported = function() {
        try {
            return document.queryCommandSupported && document.queryCommandSupported('copy');
        } catch (err) {
            return false;
        }
    };

    // Expose Clipboard to global scope
    window.Clipboard = Clipboard;
    window.ClipboardJS = Clipboard; // Also expose as ClipboardJS for compatibility

})(window, document);