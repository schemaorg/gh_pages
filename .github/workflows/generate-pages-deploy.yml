name: Generate and Deploy Schema Pages

on:
  push:
    branches: [ main, master ]
    paths:
      - 'data/schema.ttl'
      - 'data/schema.json'
      - 'data/examples/**'
      - 'generate_pages_from_jsonld.py'
      - 'convert_ttl_to_jsonld.py'
      - '.github/workflows/generate-pages-deploy.yml'
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Build job
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests pyyaml
      
      - name: Generate schema pages
        run: |
          echo "=== Pre-generation checks ==="
          echo "Current directory:"
          pwd
          echo ""
          echo "Python version:"
          python --version
          echo ""
          echo "Checking data/schema.json:"
          if [ -f "data/schema.json" ]; then
            echo "Found data/schema.json"
            echo "File size: $(ls -lh data/schema.json | awk '{print $5}')"
            echo "First few lines:"
            head -5 data/schema.json
          else
            echo "ERROR: data/schema.json not found!"
            ls -la data/
            exit 1
          fi
          echo ""
          echo "=== Cleaning old generated files ==="
          rm -rf docs/_types docs/_properties
          echo "Removed old collection directories"
          echo ""
          echo "=== Running JSON-LD based generator ==="
          python generate_pages_from_jsonld.py 2>&1 || { 
            echo "Generator failed with exit code $?"
            echo "Python version:"
            python --version
            echo "Current directory:"
            pwd
            echo "Files in current directory:"
            ls -la
            echo "Files in data directory:"
            ls -la data/
            exit 1
          }
          echo ""
          echo "=== Checking generated files ==="
          echo "Types directory:"
          if [ -d "docs/_types" ]; then
            echo "Found _types directory"
            ls -la docs/_types/ | head -5
            echo "Total type files: $(ls docs/_types/*.md 2>/dev/null | wc -l)"
          else
            echo "_types directory not found!"
            exit 1
          fi
          echo ""
          echo "Properties directory:"
          if [ -d "docs/_properties" ]; then
            echo "Found _properties directory"
            ls -la docs/_properties/ | head -5
            echo "Total property files: $(ls docs/_properties/*.md 2>/dev/null | wc -l)"
          else
            echo "_properties directory not found!"
            exit 1
          fi
      
      - name: List generated files
        run: |
          echo "Contents of docs directory:"
          ls -la docs/
          echo ""
          echo "Looking for _types and _properties directories:"
          find docs -type d -name "_types" -o -name "_properties" | head -20
          echo ""
          if [ -d "docs/_types" ]; then
            echo "Sample type files in _types:"
            ls docs/_types/ | head -5
            echo "Total type files: $(ls docs/_types/*.md 2>/dev/null | wc -l)"
          else
            echo "ERROR: docs/_types directory not found!"
          fi
          echo ""
          if [ -d "docs/_properties" ]; then
            echo "Sample property files in _properties:"
            ls docs/_properties/ | head -5
            echo "Total property files: $(ls docs/_properties/*.md 2>/dev/null | wc -l)"
          else
            echo "ERROR: docs/_properties directory not found!"
          fi
      
      - name: Create Gemfile if needed
        run: |
          if [ ! -f "docs/Gemfile" ]; then
            echo "Creating Gemfile..."
            echo 'source "https://rubygems.org"' > docs/Gemfile
            echo 'gem "jekyll", "~> 4.3"' >> docs/Gemfile
            echo 'gem "webrick"' >> docs/Gemfile
          else
            echo "Gemfile already exists:"
            cat docs/Gemfile
          fi
      
      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.0'
          bundler-cache: true
          working-directory: ./docs
      
      - name: Build Jekyll site
        run: |
          cd docs
          echo "=== Pre-Jekyll build diagnostics ==="
          echo "Current directory: $(pwd)"
          echo ""
          echo "All directories in docs:"
          find . -type d | sort
          echo ""
          echo "Checking for collection directories:"
          if [ -d "_types" ]; then
            echo "✓ _types directory exists"
            echo "  Number of .md files: $(find _types -name '*.md' | wc -l)"
            echo "  First 3 type files:"
            find _types -name '*.md' | head -3 | xargs -I {} bash -c 'echo "    {}"; head -10 "{}" | grep -E "^(title:|permalink:)" | sed "s/^/      /"'
          else
            echo "✗ _types directory NOT FOUND"
          fi
          echo ""
          if [ -d "_properties" ]; then
            echo "✓ _properties directory exists"
            echo "  Number of .md files: $(find _properties -name '*.md' | wc -l)"
            echo "  First 3 property files:"
            find _properties -name '*.md' | head -3 | xargs -I {} bash -c 'echo "    {}"; head -10 "{}" | grep -E "^(title:|permalink:)" | sed "s/^/      /"'
          else
            echo "✗ _properties directory NOT FOUND"
          fi
          echo ""
          echo "Jekyll config:"
          cat _config.yml
          echo ""
          echo "=== Installing Jekyll dependencies ==="
          bundle install
          echo ""
          echo "=== Building Jekyll site ==="
          JEKYLL_ENV=production bundle exec jekyll build --destination _site --baseurl /gh_pages --verbose --trace || {
            echo ""
            echo "=== Jekyll build failed! ==="
            echo "Checking if _site was partially created:"
            ls -la _site/ 2>/dev/null || echo "No _site directory"
            exit 1
          }
          echo ""
          echo "=== Post-Jekyll build diagnostics ==="
          echo "Checking if _site directory exists:"
          if [ -d "_site" ]; then
            echo "✓ _site directory exists"
            echo "Contents of _site (first 20):"
            ls -la _site/ | head -20
          else
            echo "✗ ERROR: _site directory does not exist!"
            echo "Jekyll build may have failed silently"
            echo "Current directory contents:"
            ls -la
          fi
          echo ""
          echo "All HTML files in _site:"
          find _site -name "*.html" | head -20
          echo ""
          echo "Looking for Person.html:"
          find _site -name "*Person*" -type f | head -10
          echo ""
          echo "Looking for any property files:"
          find _site -name "*property*" -o -name "*Property*" | head -10
          echo ""
          echo "Checking collection output:"
          echo "Direct search for Person:"
          ls -la _site/Person* 2>/dev/null || echo "No Person file found at root"
          echo ""
          if [ -d "_site/types" ]; then
            echo "Found _site/types directory"
            ls _site/types/ | head -5
          else
            echo "No _site/types directory"
          fi
          if [ -d "_site/properties" ]; then
            echo "Found _site/properties directory"
            ls _site/properties/ | head -5
          else
            echo "No _site/properties directory"
          fi
          echo ""
          echo "Checking if collections were built:"
          echo "Files in _site root:"
          ls _site/ | grep -E "(Person|Thing|name|description)" | head -10 || echo "No schema files found"
          echo ""
          echo "Checking Jekyll processing of debug.html:"
          if [ -f "_site/debug.html" ]; then
            if grep -q "site.baseurl" _site/debug.html; then
              echo "WARNING: Jekyll did not process liquid tags!"
              echo "First 30 lines of debug.html:"
              head -30 _site/debug.html
            else
              echo "Jekyll processed debug.html successfully"
              echo "Checking collections in debug.html:"
              grep -A5 "Types Collection" _site/debug.html || echo "Types Collection not found"
              grep -A5 "Properties Collection" _site/debug.html || echo "Properties Collection not found"
            fi
          else
            echo "debug.html not found in _site"
          fi
        env:
          JEKYLL_ENV: production
      
      - name: Setup Pages
        uses: actions/configure-pages@v4
      
      - name: Pre-upload verification
        run: |
          echo "=== Final verification before artifact upload ==="
          echo "Current working directory: $(pwd)"
          echo ""
          echo "Looking for _site directory:"
          find . -name "_site" -type d | head -10
          echo ""
          echo "Checking ./docs/_site directory:"
          if [ -d "./docs/_site" ]; then
            echo "✓ _site directory exists at ./docs/_site"
            echo "Total files: $(find ./docs/_site -type f | wc -l)"
            echo "Total directories: $(find ./docs/_site -type d | wc -l)"
            echo ""
            echo "Top-level contents:"
            ls -la ./docs/_site/ | head -15
            echo ""
            echo "HTML files at root:"
            ls ./docs/_site/*.html 2>/dev/null | head -10 || echo "No HTML files at root"
            echo ""
            echo "Looking for Person.html:"
            find ./docs/_site -name "*Person*" | head -10
            echo ""
            echo "All directories in _site:"
            find ./docs/_site -type d | head -20
          else
            echo "✗ ERROR: ./docs/_site directory does not exist!"
            echo ""
            echo "Checking if _site exists elsewhere:"
            if [ -d "docs/_site" ]; then
              echo "Found at docs/_site (without ./)"
              ls -la docs/_site/ | head -10
            elif [ -d "_site" ]; then
              echo "Found at _site"
              ls -la _site/ | head -10
            else
              echo "No _site directory found anywhere"
            fi
            exit 1
          fi
      
      - name: Final directory check
        run: |
          echo "=== Absolute path check ==="
          echo "Current working directory: $(pwd)"
          echo "docs/_site absolute path: $(realpath docs/_site)"
          echo ""
          echo "Checking if docs/_site exists:"
          if [ -d "docs/_site" ]; then
            echo "✓ docs/_site exists"
            echo "Contents:"
            ls -la docs/_site/ | head -10
          else
            echo "✗ docs/_site does not exist!"
            echo "Contents of docs/:"
            ls -la docs/
            exit 1
          fi
      
      - name: Prepare artifact directory
        run: |
          echo "=== Preparing artifact ==="
          echo "Current directory: $(pwd)"
          echo "Checking docs/_site:"
          if [ -d "docs/_site" ]; then
            echo "✓ docs/_site exists"
            echo "Number of files: $(find docs/_site -type f | wc -l)"
            echo "Number of HTML files: $(find docs/_site -name "*.html" | wc -l)"
            echo ""
            echo "Checking for Person.html specifically:"
            find docs/_site -name "Person.html" -o -name "Person" | head -5
            echo ""
            echo "First 10 files in _site:"
            find docs/_site -type f | head -10
          else
            echo "✗ ERROR: docs/_site does not exist!"
            exit 1
          fi
      
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          # Upload the Jekyll output
          path: 'docs/_site'
  
  # Deployment job
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4